'use strict';var _createClass=function(){function a(b,c){for(var e,d=0;d<c.length;d++)e=c[d],e.enumerable=e.enumerable||!1,e.configurable=!0,'value'in e&&(e.writable=!0),Object.defineProperty(b,e.key,e)}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}();function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError('Cannot call a class as a function')}var OnlyTime=function(){function a(){var b=0<arguments.length&&void 0!==arguments[0]?arguments[0]:':';_classCallCheck(this,a),(b&&1<(b+'').length||!isNaN(b))&&this.throwError('Invalid separator - has to be one character and cannot be a digit.'),this.separator=b}return _createClass(a,[{key:'format',value:function format(b){var c=''+b;return 0===b?c='00':10>b&&(c='0'+b),c}},{key:'toMinutes',value:function toMinutes(b){this.checkTimeMinutes(b);var c=b.split(this.separator);return 60*+c[0]+ +c[1]}},{key:'toSeconds',value:function toSeconds(b){this.checkTimeSeconds(b);var c=b.split(this.separator);return 3600*+c[0]+60*+c[1]+ +c[2]}},{key:'fromMinutes',value:function fromMinutes(b){this.checkMinutes(b);var c=this.checkModulo(b);return String.prototype.concat(this.format((b-c)/60),this.separator,this.format(c))}},{key:'fromSeconds',value:function fromSeconds(b){this.checkSeconds(b);var c=this.checkModulo(b);return String.prototype.concat(this.fromMinutes((b-c)/60),this.separator,this.format(c))}},{key:'checkModulo',value:function checkModulo(b){return b%60}},{key:'checkMinutes',value:function checkMinutes(b){(0>b||1440<b)&&this.throwError('Wrong number of minutes: '+b+'. Should be in the range [0, 1440].')}},{key:'checkSeconds',value:function checkSeconds(b){(0>b||86400<b)&&this.throwError('Wrong number of seconds: '+b+'. Should be in the range [0, 86400].')}},{key:'checkTimeMinutes',value:function checkTimeMinutes(b){this.minutesTest=this.minutesTest?this.minutesTest:new RegExp('([01]\\d|2[0-3])\\'+this.separator+'([0-5]\\d)'),this.minutesTest.exec(b)||this.throwError('Invalid time with minutes: '+b+'.')}},{key:'checkTimeSeconds',value:function checkTimeSeconds(b){this.secondsTest=this.secondsTest?this.secondsTest:new RegExp('([01]\\d|2[0-3])\\'+this.separator+'([0-5]\\d)\\'+this.separator+'([0-5]\\d)'),this.secondsTest.exec(b)||this.throwError('Invalid time with seconds:  '+b+'.')}},{key:'throwError',value:function throwError(b){throw new Error('only-time: '+b)}},{key:'toTime',value:function toTime(b){return this.fromMinutes(b)}}]),a}();
