"use strict";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}var OnlyTime=function(){function OnlyTime(){var separator=arguments.length>0&&arguments[0]!==undefined?arguments[0]:":";_classCallCheck(this,OnlyTime);if(separator&&String(separator).length>1||!isNaN(separator)){this.throwError("Invalid separator - has to be one character and cannot be a digit.")}this.separator=separator}_createClass(OnlyTime,[{key:"format",value:function format(int){var n=""+int;if(int===0){n="00"}else if(int<10){n="0"+int}return n}},{key:"toMinutes",value:function toMinutes(time){this.checkTimeMinutes(time);var t=time.split(this.separator);return Number(t[0])*60+Number(t[1])}},{key:"toSeconds",value:function toSeconds(time){this.checkTimeSeconds(time);var t=time.split(this.separator);return Number(t[0])*3600+Number(t[1])*60+Number(t[2])}},{key:"fromMinutes",value:function fromMinutes(minutes){this.checkMinutes(minutes);var modulo=this.checkModulo(minutes);return String.prototype.concat(this.format((minutes-modulo)/60),this.separator,this.format(modulo))}},{key:"fromSeconds",value:function fromSeconds(seconds){this.checkSeconds(seconds);var modulo=this.checkModulo(seconds);return String.prototype.concat(this.fromMinutes((seconds-modulo)/60),this.separator,this.format(modulo))}},{key:"checkModulo",value:function checkModulo(time){return time%60}},{key:"checkMinutes",value:function checkMinutes(minutes){if(minutes<0||minutes>1440){this.throwError("Wrong number of minutes: "+minutes+". Should be in the range [0, 1439].")}}},{key:"checkSeconds",value:function checkSeconds(seconds){if(seconds<0||seconds>86400){this.throwError("Wrong number of seconds: "+seconds+". Should be in the range [0, 86399].")}}},{key:"checkTimeMinutes",value:function checkTimeMinutes(time){this.minutesTest=this.minutesTest?this.minutesTest:new RegExp("([01]\\d|2[0-3])\\"+this.separator+"([0-5]\\d)");if(time.length!==5||!this.minutesTest.exec(time)){this.throwError("Invalid time with minutes: "+time+".")}}},{key:"checkTimeSeconds",value:function checkTimeSeconds(time){this.secondsTest=this.secondsTest?this.secondsTest:new RegExp("([01]\\d|2[0-3])\\"+this.separator+"([0-5]\\d)\\"+this.separator+"([0-5]\\d)");if(time.length!==8||!this.secondsTest.exec(time)){this.throwError("Invalid time with seconds:  "+time+".")}}},{key:"throwError",value:function throwError(reason){throw new Error("only-time: "+reason)}},{key:"toTime",value:function toTime(minutes){return this.fromMinutes(minutes)}}]);return OnlyTime}();
